@page "/Echo"
@using System.Diagnostics
<h3>Welcome to Echo.IO!</h3>
<h2>Find songs based on bpm!</h2>
<p>Just start tapping and we will search when you're done.</p>
<p role="status">Click count: @currentCount</p>
<p role="status">Running BPM: @runningBPM</p>

<p role="status">Elapsed Time: @timer.ElapsedMilliseconds</p>
<button class="btn btn-primary" @onclick="RegisterTap">Click me</button>
<button class="btn btn-primary" @onclick="Search">Search Using Current BPM</button>

@code {
    private int currentCount = 0;

    private bool isFirstClick = true;

    private Stopwatch timer = new Stopwatch();

    private double averageMillisecondsBetweenClick = 0;

    private long milliSecondsSinceLastTap = 1;

    private long elapsedMillisecondsAtLastTap = 0;

    private double runningBPM = 0;

    private long runningMillisecondTimeTotalBetweenTaps = 0;

    private void RegisterTap()
    {
        // Start the running timer when the button is first clicked.
        if (isFirstClick)
        {
            timer.Start();
            currentCount++;
            isFirstClick = false;
            return;
        }

        currentCount++;

        var currentElapsedMilliseconds = timer.ElapsedMilliseconds;

        var timeSinceLastTap = currentElapsedMilliseconds - elapsedMillisecondsAtLastTap;

        // We don't want to use just the latest tap, we want to adjust against a running average.
        // People aren't metronomes!
        runningMillisecondTimeTotalBetweenTaps += timeSinceLastTap;

        elapsedMillisecondsAtLastTap = currentElapsedMilliseconds;

        // BPM is taps divided by time elapsed. Using only the time between taps as counting towards total time
        // to avoid bpm continuing to shrink when the user is done tapping.
        runningBPM = currentCount / (runningMillisecondTimeTotalBetweenTaps / (float)(1000 * 60));
    }

    private void Search()
    {

    }
}